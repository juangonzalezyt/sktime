
How to contribute
=================

Welcome to our contributing guidelines! sktime is a community-driven project and your help is extremely welcome! If you get stuck, please don't hesitate to `chat with us <https://gitter.im/sktime/community>`_ or `raise an issue <https://github.com/alan-turing-institute/sktime/issues/new/choose>`_.

Contents
--------


* `Areas of contribution <#Areas-of-contribution>`_
* `Git and GitHub workflow <#Git-and-GitHub-workflow>`_
* `Continuous integration <#Continuous-integration>`_
* `Documentation <#Documentation>`_
* `Coding style <#Coding-style>`_
* `Pull request checklist <#Pull-request-checklist>`_
* `Reporting bugs <#Reporting-bugs>`_

Areas of contribution
---------------------

We value all contributions - not just code. We follow the `allcontributors specification <https://allcontributors.org>`_ and recognise various types of contributions as described `here <https://allcontributors.org/docs/en/emoji-key>`_.

The following table gives an overview of key areas of contribution. 

.. list-table::
   :header-rows: 1

   * - Area
     - Contribution
   * - Documentation
     - Improve or add docstrings, glossary terms, the user guide, and the example notebooks.
   * - Testing
     - Report bugs, improve or add unit tests, conduct field testing on real-world data sets
   * - Code
     - Improve or add functionality, fix bugs
   * - API design
     - Design interfaces for estimators and other functionality
   * - Maintenance
     - Improve development operations (continuous integration pipeline, GitHub bots), manage and review issues/pull requests
   * - Outreach
     - Organize talks, tutorials or workshops, write blog posts
   * - Mentoring
     - Onboarding and mentoring new contributors
   * - Project management
     - Finding funding, organising meetings, initiating new collaborations


Git and GitHub workflow
-----------------------

The preferred workflow for contributing to sktime's repository is to fork the `main repository <https://github.com/alan-turing-institute/sktime/>`_ on GitHub, clone, and develop on a new branch. Steps:


#. 
   Fork the `project repository <https://github.com/alan-turing-institute/sktime>`_ by clicking on the \'Fork\' button near the top right of the page. This creates a copy of the code under your GitHub user account. For more details on how to fork a repository see `this guide <https://help.github.com/articles/fork-a-repo/>`_.

#. 
   `Clone <https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository>`_ your fork of the sktime repo from your GitHub account to your local disk:

   .. code-block:: bash

       git clone git@github.com:USERNAME/sktime.git
       cd sktime

#. 
   Configure and link the remote for your fork to the upstream repository:

   .. code-block:: bash

       git remote -v
       git remote add upstream https://github.com/alan-turing-institute/sktime.git

#. 
   Verify the new upstream repository you\'ve specified for your fork:

   .. code-block:: bash

       git remote -v
       > origin    https://github.com/USERNAME/YOUR_FORK.git (fetch)
       > origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
       > upstream  https://github.com/alan-turing-institute/sktime.git (fetch)
       > upstream  https://github.com/alan-turing-institute/sktime.git (push)

#. 
   `Sync <https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork>`_ the ``master`` branch of your fork with the upstream repository:

   .. code-block:: bash

       git fetch upstream
       git checkout master --track origin/master
       git merge upstream/master

#. 
   Create a new ``feature`` branch from the ``master`` branch to hold your changes:

   .. code-block:: bash

       git checkout master
       git checkout -b <my-feature-branch>

   Always use a ``feature`` branch. It\'s good practice to never work on the ``master`` branch! Name the ``feature`` branch after your contribution.

#. 
   Develop your contribution on your feature branch. Add changed files using ``git add`` and then ``git commit`` files to record your changes in Git:

   .. code-block:: bash

       git add <modified_files>
       git commit

#. 
   When finished, push the changes to your GitHub account with:

   .. code-block:: bash

       git push --set-upstream origin my-feature-branch

#. 
   Follow `these instructions <https://help.github.com/articles/creating-a-pull-request-from-a-fork>`_ to create a pull request from your fork. If your work is still work in progress, you can open a draft pull request. We recommend to open a pull request early, so that other contributors become aware of your work and can give you feedback early on. 

#. 
   To add more changes, simply repeat steps 7 - 8. Pull requests are
   updated automatically if you push new changes to the same branch.

If any of the above seems like magic to you, please look up the `Git documentation <https://git-scm.com/documentation>`_ on the web. If you get stuck, feel free to `chat with us <https://gitter.im/sktime/community>`_ or `raise an issue <https://github.com/alan-turing-institute/sktime/issues/new/choose>`_.

Continuous integration
----------------------

We use `pytest <https://docs.pytest.org/en/latest/>`_ for unit testing, and continuous integration services on GitHub to automatically check if new pull requests do not break anything and comply with sktime's API.

sktime follows `scikit-learn <https://scikit-learn.org/stable/>`_\ 's API whenever possible, it'll be useful to take a look at their `developers' guide <https://scikit-learn.org/stable/developers/index.html>`_.

To check if your code passes all tests locally, you need to install the development version of sktime and all extra dependencies. Steps:


#. 
   Install all extra requirements from the root directory of sktime:

   .. code-block:: bash

      pip install -r build_tools/requirements.txt

#. 
   Install the development version from the root directory:

   .. code-block:: bash

      pip install --editable .

   This installs a development version of sktime which will include all of your changes. For trouble shooting on different operating systems, please see our detailed `installation instructions <https://sktime.org/installation.html>`_.

#. 
   To run all unit tests, run:

   .. code-block:: bash

      pytest sktime/

Documentation
-------------

To build our online documentation and website locally, you need to install a few additional dependencies listed in ``setup.py``. From the root directory, run:

.. code-block:: bash

   pip install -e .[docs]

For trouble shooting on different operating systems, please see our detailed `installation instructions <https://sktime.org/installation.html>`_.

To build the website, you need to run:

.. code-block:: bash

   make docs

You can find the generated files in the ``sktime/docs/_build/`` folder. To view the website, open ``sktime/docs/_build/html/index.html`` with your preferred web browser.

Coding style
------------

We follow the `PEP8 <https://www.python.org/dev/peps/pep-0008/>`_ coding guidelines. A good example can be found `here <https://gist.github.com/nateGeorge/5455d2c57fb33c1ae04706f2dc4fee01>`_.

We use `flake8 <https://flake8.pycqa.org/en/latest/>`_ to automatically check whether your contribution complies with the PEP8 style. To check if your code locally, you can install and run flake8 in the root directory of sktime:

.. code-block:: bash

   pip install flake8
   flake8 sktime/

For docstrings, we use the `numpy docstring standard <https://numpydoc.readthedocs.io/en/latest/format.html\#docstring-standard>`_.

In addition, we add the following guidelines:


* Please check out our `glossary of terms <https://github.com/alan-turing-institute/sktime/wiki/Glossary>`_.
* Use underscores to separate words in non-class names: ``n_instances`` rather than ``ninstances``.
* Avoid multiple statements on one line. Prefer a line return after a control flow statement (\ ``if``\ /\ ``for``\ ).
* Use absolute imports for references inside sktime.
* Please don't use ``import *`` in any case. It is considered harmful by the official Python recommendations. It makes the code harder to read as the origin of symbols is no longer explicitly referenced, but most important, it prevents using a static analysis tool like pyflakes to automatically find bugs.

Pull request checklist
----------------------

We recommended that your contribution complies with the following rules
before you submit a pull request:


* Give your pull request a helpful title that summarises what your contribution does. In some cases ``Fix <ISSUE TITLE>`` is enough. ``Fix #<ISSUE NUMBER>`` is not enough.
* Often pull requests resolve one or more other issues (or pull requests). If merging your pull request means that some other issues/pull requests should be closed, you should `use keywords to create links to them <https://github.com/blog/1506-closing-issues-via-pull-requests/>`_ (for example, ``Fixes #1234``\ ; multiple issues/PRs are allowed as long as each one is preceded by a keyword). Upon merging, those issues/pull requests will automatically be closed by GitHub. If your pull request is simply related to some other issues/PRs, create a link to them without using the keywords (for example, ``See also #1234``\ ).
* All public methods should have informative docstrings with sample usage presented as doctests when appropriate.

Reporting bugs
--------------

We use GitHub issues to track all bugs and feature requests; feel free to open an issue if you have found a bug or wish to see a feature implemented.

It is recommended to check that your issue complies with the following rules before submitting:


* Verify that your issue is not being currently addressed by other `issues <https://github.com/alan-turing-institute/sktime/issues>`_ or `pull requests <https://github.com/alan-turing-institute/sktime/pulls>`_.
* Please ensure all code snippets and error messages are formatted in appropriate code blocks. See `Creating and highlighting code blocks <https://help.github.com/articles/creating-and-highlighting-code-blocks>`_.
* Please be specific about what estimators and/or functions are involved and the shape of the data, as appropriate; please include a `reproducible <https://stackoverflow.com/help/mcve>`_ code snippet or link to a `gist <https://gist.github.com>`_. If an exception is raised, please provide the traceback.
